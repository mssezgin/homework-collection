####################
## mustafa sezgin ##
## 2380863        ##
####################
	.pos 0x0
	irmovq	stack,%rsp
	call	main
	halt

# bst
	.pos 0x200
root:
	.quad 17
	.quad node6
	.quad node24
node6:
	.quad 6
	.quad node4
	.quad node11
node4:
	.quad 4
	.quad node3
	.quad node5
node3:
	.quad 3
	.quad 0
	.quad 0
node5:
	.quad 5
	.quad 0
	.quad 0
node11:
	.quad 11
	.quad node8
	.quad 0
node8:
	.quad 8
	.quad 0
	.quad 0
node24:
	.quad 24
	.quad node19
	.quad node40
node19:
	.quad 19
	.quad 0
	.quad 0
node40:
	.quad 40
	.quad 0
	.quad node52
node52:
	.quad 52
	.quad 0
	.quad 0

# array
	.pos 0x400
array:
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

# int main()
main:
	irmovq	root,%rdi
	irmovq	array,%rsi
	irmovq	$0x8,%rdx
	call	collect_into
	ret

# long collect_into(const node *root, long *array, long array_len)
collect_into:
	andq	%rdi,%rdi
	je	if
	andq	%rdx,%rdx
	jg	else
if:
	irmovq	$0x0,%rax		# if (root != 0 || array_len <= 0)
	ret
else:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	rrmovq	%rdi,%rbp		# rbp = root
	rrmovq	%rsi,%r12		# r12 = array
	rrmovq	%rdx,%r13		# r13 = array_len
	mrmovq	0x8(%rbp),%rdi		# rdi = root->left
	call	collect_into		# rax = collect_into(root->left, array, array_len)
	rrmovq	%rax,%rbx		# rbx = rax = left_len
	subq	%r13,%rbx		# rbx = left_len - array_len
	je	retn			# return if (rbx == 0)
	rrmovq	%rax,%rbx		# rbx = left_len
	addq	%rax,%rax		# rax = left_len * 2
	addq	%rax,%rax		# rax = left_len * 4
	addq	%rax,%rax		# rax = left_len * 8
	addq	%r12,%rax		# rax = array + left_len * 8
	mrmovq	(%rbp),%rcx		# rcx = root->value
	rmmovq	%rcx,(%rax)		# *rax = rcx
	irmovq	$0x1,%rcx		# rcx = 1
	addq	%rcx,%rbx		# rbx = lef_len + 1
	subq	%rbx,%r13		# r13 = array_len - (left_len + 1)
	rrmovq	%r13,%rdx		# rdx = r13
	irmovq	$0x8,%rcx		# rcx = 8
	addq	%rcx,%rax		# rax = array + left_len * 8 + 8
	rrmovq	%rax,%rsi		# rsi = rax
	mrmovq	0x10(%rbp),%rdi		# rdi = root->right
	call	collect_into		# rax = collect_into(root->right, array + (left_len + 1) * 8, array_len - left_len - 1)
	addq	%rbx,%rax		# rax = right_len + left_len + 1
retn:
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

# stack
	.pos 0x800
stack:
