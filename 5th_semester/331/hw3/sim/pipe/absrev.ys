#/* $begin absrev-ys */
##################################################################
# absrev.ys - Reverse a src block of len words to dst.
# Return the sum of absolute values of words contained in src.
#
# Include your name and ID here.
# Describe how and why you modified the baseline code.
##################################################################
#
#    mustafa sezgin
#    2380863
#
#    min avg: 9.20 CPE
#
# 1. reduction in strength: instead of setting rcx to 0 and
#    using eight additions, i set rcx to len (rdx) and add rcx
#    to itself three times.
#    (-5 instruction per program)
#    avg: 17.83 -> 17.46
#
# 2. instead of using another register (rcx) to hold dst_rev,
#    i convert dst (rsi) to dst_rev.
#    (-1 instruction per program)
#    also, rdx now holds eight times length and is decremented
#    by eight at each iteration as if it were a pointer, which
#    eliminates setting r10 to 1.
#    (-1 instruction per iteration)
#    avg: 17.46 -> 16.38
#
# 3. code motion: i used r8 (instead of r10) as a constant global
#    variable to hold 8 for addq and subq.
#    (-1 instruction per iteration)
#    avg: 16.38 -> 15.38
#
# 4. i deleted the first condition check and keep the one
#    (labeled as Condition) that is at the end of the loop body.
#    this condition check is prone to continuing the iteration
#    and misprediction happens only once (before returning).
#    (-1 instruction per program)
#    avg: 15.38 -> 15.31
#
# 5. i decremented the length (rdx) with subq at the last step
#    and use the condition codes set by it to check the loop
#    condition, which eliminates 'andq %rdx,%rdx' instruction.
#    consequently, length is decremented before starting the
#    loop and causes 1 less iteration. to avoid this side effect,
#    i converted jg to jge, which is equivalent to
#    'while (--len >= 0)'.
#    (-1 instruction per iteration)
#    also, i implemented leaq instruction on pipe-full.hcl and
#    used it instead of some of addq and subq instructions.
#    avg: 15.31 -> 14.31
#
# 6. reduction in strength: instead of adding the absolute value
#    of val to the sum, i subtracted it from the sum if val < 0.
#    (-2 instruction per iteration when val < 0)
#    avg: 14.31 -> 13.27
#
# 7. i eliminated the load use hazard by moving an increment
#    instruction between mrmovq and rmmovq.
#    (-1 instruction per iteration)
#    avg: 13.27 -> 12.27
#
# 8. loop unrolling: i applied 6x1 loop unrolling. this
#    eliminates increment and decrement at each 5 iteration.
#    (-15 instruction per 6 iteration)
#    also, i needed to keep 48 in a register (r9) for decrement
#    len.
#    (+1 instruction per program)
#    since i cannot check the loop condition without decrementing
#    len (equivalent to 'while ((len -= 6) >= 0)'), i needed to
#    increment it back once it quits the first loop.
#    (+1 instruction per program)
#    since elements are not always positive, i used equal number
#    of jge and jl instructions.
#    avg: 12.27 -> 10.07
#
# 9. for all occurrences of jmp instruction, i copy-n-pasted
#    every line of code that follows it.
#    (-1 instruction per iteration)
#    avg: 10.07 -> 9.28
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
absrev:
##################################################################
# You can modify this portion
	xorq	%rax,%rax			# sum = 0;
	irmovq	$0x8,%r8			# const r8 = 8
	irmovq	$0x30,%r9			# const r9 = 48
	addq	%rdx,%rdx			# rdx = len * 2
	addq	%rdx,%rdx			# rdx = len * 4
	addq	%rdx,%rdx			# rdx = len * 8
	addq	%rdx,%rsi			# rsi = dst + len * 8
	leaq	0xfffffffffffffff8(%rsi),%rsi	# rsi = dst + len * 8 - 8

	# 6x1 loop unrolling
	subq	%r9,%rdx			# len -= 6, and check if len >= 0
	jge	Loop1				# if so, goto Loop.1:
	addq	%r9,%rdx			# len += 6, to cure predecrement issue
	subq	%r8,%rdx			# len--, and check if len >= 0
	jge	Loop2				# if so, goto Loop:
	ret

Loop1:    
	mrmovq	(%rdi),%r10			# val1 = *src
	mrmovq	0x8(%rdi),%r11			# val2 = *(src + 1)
	mrmovq	0x10(%rdi),%r12			# val3 = *(src + 2)
	mrmovq	0x18(%rdi),%r13			# val4 = *(src + 3)
	mrmovq	0x20(%rdi),%rbx			# val5 = *(src + 4)
	mrmovq	0x28(%rdi),%rbp			# val6 = *(src + 5)
	rmmovq	%r10,(%rsi)			# *dst_rev = val1
	rmmovq	%r11,0xfffffffffffffff8(%rsi)	# *(dst_rev - 1) = val2
	rmmovq	%r12,0xfffffffffffffff0(%rsi)	# *(dst_rev - 2) = val3
	rmmovq	%r13,0xffffffffffffffe8(%rsi)	# *(dst_rev - 3) = val4
	rmmovq	%rbx,0xffffffffffffffe0(%rsi)	# *(dst_rev - 4) = val5
	rmmovq	%rbp,0xffffffffffffffd8(%rsi)	# *(dst_rev - 5) = val6

# test10
	andq	%r10,%r10			# compare val1 to 0
	jge	Positive10			#
	subq	%r10,%rax			# sum -= val1, if val1 < 0
# test11
	andq	%r11,%r11			# compare val2 to 0
	jge	Positive11			#
	subq	%r11,%rax			# sum -= val2, if val2 < 0
# test12
	andq	%r12,%r12			# compare val3 to 0
	jge	Positive12			#
	subq	%r12,%rax			# sum -= val3, if val3 < 0
# test13
	andq	%r13,%r13			# compare val4 to 0
	jl	Negative13			#
	addq	%r13,%rax			# sum += val4, if val4 >= 0
# testbx
	andq	%rbx,%rbx			# compare val5 to 0
	jl	Negative14			#
	addq	%rbx,%rax			# sum += val5, if val5 >= 0
# testbp
	andq	%rbp,%rbp			# compare val6 to 0
	jl	Negative15			#
	addq	%rbp,%rax			# sum += val6, if val6 >= 0
	leaq	0x30(%rdi),%rdi			# src += 6
	leaq	0xffffffffffffffd0(%rsi),%rsi	# dst_rev -= 6
	subq	%r9,%rdx			# len -= 6, and check if len >= 0
	jge	Loop1				# if so, goto Loop.1:
	addq	%r9,%rdx			# len += 6, to cure predecrement issue
	subq	%r8,%rdx			# len--, and check if len >= 0
	jge	Loop2				# if so, goto Loop:
	ret

Positive10:					#
	addq	%r10,%rax			# sum += val1, if val1 >= 0
# test11
	andq	%r11,%r11			# compare val2 to 0
	jge	Positive11			#
	subq	%r11,%rax			# sum -= val2, if val2 < 0
# test12
	andq	%r12,%r12			# compare val3 to 0
	jge	Positive12			#
	subq	%r12,%rax			# sum -= val3, if val3 < 0
# test13
	andq	%r13,%r13			# compare val4 to 0
	jl	Negative13			#
	addq	%r13,%rax			# sum += val4, if val4 >= 0
# testbx
	andq	%rbx,%rbx			# compare val5 to 0
	jl	Negative14			#
	addq	%rbx,%rax			# sum += val5, if val5 >= 0
# testbp
	andq	%rbp,%rbp			# compare val6 to 0
	jl	Negative15			#
	addq	%rbp,%rax			# sum += val6, if val6 >= 0
	leaq	0x30(%rdi),%rdi			# src += 6
	leaq	0xffffffffffffffd0(%rsi),%rsi	# dst_rev -= 6
	subq	%r9,%rdx			# len -= 6, and check if len >= 0
	jge	Loop1				# if so, goto Loop.1:
	addq	%r9,%rdx			# len += 6, to cure predecrement issue
	subq	%r8,%rdx			# len--, and check if len >= 0
	jge	Loop2				# if so, goto Loop:
	ret

Positive11:					#
	addq	%r11,%rax			# sum += val2, if val2 >= 0
# test12
	andq	%r12,%r12			# compare val3 to 0
	jge	Positive12			#
	subq	%r12,%rax			# sum -= val3, if val3 < 0
# test13
	andq	%r13,%r13			# compare val4 to 0
	jl	Negative13			#
	addq	%r13,%rax			# sum += val4, if val4 >= 0
# testbx
	andq	%rbx,%rbx			# compare val5 to 0
	jl	Negative14			#
	addq	%rbx,%rax			# sum += val5, if val5 >= 0
# testbp
	andq	%rbp,%rbp			# compare val6 to 0
	jl	Negative15			#
	addq	%rbp,%rax			# sum += val6, if val6 >= 0
	leaq	0x30(%rdi),%rdi			# src += 6
	leaq	0xffffffffffffffd0(%rsi),%rsi	# dst_rev -= 6
	subq	%r9,%rdx			# len -= 6, and check if len >= 0
	jge	Loop1				# if so, goto Loop.1:
	addq	%r9,%rdx			# len += 6, to cure predecrement issue
	subq	%r8,%rdx			# len--, and check if len >= 0
	jge	Loop2				# if so, goto Loop:
	ret

Positive12:					#
	addq	%r12,%rax			# sum += val3, if val3 >= 0
# test13
	andq	%r13,%r13			# compare val4 to 0
	jl	Negative13			#
	addq	%r13,%rax			# sum += val4, if val4 >= 0
# testbx
	andq	%rbx,%rbx			# compare val5 to 0
	jl	Negative14			#
	addq	%rbx,%rax			# sum += val5, if val5 >= 0
# testbp
	andq	%rbp,%rbp			# compare val6 to 0
	jl	Negative15			#
	addq	%rbp,%rax			# sum += val6, if val6 >= 0
	leaq	0x30(%rdi),%rdi			# src += 6
	leaq	0xffffffffffffffd0(%rsi),%rsi	# dst_rev -= 6
	subq	%r9,%rdx			# len -= 6, and check if len >= 0
	jge	Loop1				# if so, goto Loop.1:
	addq	%r9,%rdx			# len += 6, to cure predecrement issue
	subq	%r8,%rdx			# len--, and check if len >= 0
	jge	Loop2				# if so, goto Loop:
	ret

Negative13:					#
	subq	%r13,%rax			# sum -= val4, if val4 < 0
# testbx
	andq	%rbx,%rbx			# compare val5 to 0
	jl	Negative14			#
	addq	%rbx,%rax			# sum += val5, if val5 >= 0
# testbp
	andq	%rbp,%rbp			# compare val6 to 0
	jl	Negative15			#
	addq	%rbp,%rax			# sum += val6, if val6 >= 0
	leaq	0x30(%rdi),%rdi			# src += 6
	leaq	0xffffffffffffffd0(%rsi),%rsi	# dst_rev -= 6
	subq	%r9,%rdx			# len -= 6, and check if len >= 0
	jge	Loop1				# if so, goto Loop.1:
	addq	%r9,%rdx			# len += 6, to cure predecrement issue
	subq	%r8,%rdx			# len--, and check if len >= 0
	jge	Loop2				# if so, goto Loop:
	ret

Negative14:					#
	subq	%rbx,%rax			# sum -= val5, if val5 < 0
# testbp
	andq	%rbp,%rbp			# compare val6 to 0
	jl	Negative15			#
	addq	%rbp,%rax			# sum += val6, if val6 >= 0
	leaq	0x30(%rdi),%rdi			# src += 6
	leaq	0xffffffffffffffd0(%rsi),%rsi	# dst_rev -= 6
	subq	%r9,%rdx			# len -= 6, and check if len >= 0
	jge	Loop1				# if so, goto Loop.1:
	addq	%r9,%rdx			# len += 6, to cure predecrement issue
	subq	%r8,%rdx			# len--, and check if len >= 0
	jge	Loop2				# if so, goto Loop:
	ret

Negative15:					#
	subq	%rbp,%rax			# sum -= val6, if val6 < 0
	leaq	0x30(%rdi),%rdi			# src += 6
	leaq	0xffffffffffffffd0(%rsi),%rsi	# dst_rev -= 6
Condition1:
	subq	%r9,%rdx			# len -= 6, and check if len >= 0
	jge	Loop1				# if so, goto Loop.1:
	addq	%r9,%rdx			# len += 6, to cure predecrement issue
	subq	%r8,%rdx			# len--, and check if len >= 0
	jge	Loop2				# if so, goto Loop:
	ret

	# no unrolling
Loop2:
	mrmovq	(%rdi),%r10			# val = *rsc
	leaq	0x8(%rdi),%rdi			# src++
	rmmovq	%r10,(%rsi)			# *dst_rev = val
# test10
	andq	%r10,%r10			# compare val to 0
	jl	Negative20			#
	addq	%r10,%rax			# sum += val, if val >= 0
	leaq	0xfffffffffffffff8(%rsi),%rsi	# dst_rev--
	subq	%r8,%rdx			# len--, and check if len >= 0
	jge	Loop2				# if so, goto Loop:
	ret

Negative20:
	subq	%r10,%rax			# sum -= val, if val < 0
	leaq	0xfffffffffffffff8(%rsi),%rsi	# dst_rev--
Condition2:
	subq	%r8,%rdx			# len--, and check if len >= 0
	jge	Loop2				# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end absrev-ys */
